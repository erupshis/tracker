name: env

on:
  workflow_call:
    outputs:
      GO_VERSION:
        description: "Go version"
        value: ${{ jobs.load-env.outputs.GO_VERSION }}
      DB_USER:
        description: "Database user"
        value: ${{ jobs.load-env.outputs.DB_USER }}
      DB_PASSWORD:
        description: "Database password"
        value: ${{ jobs.load-env.outputs.DB_PASSWORD }}
      DB_NAME:
        description: "Database name"
        value: ${{ jobs.load-env.outputs.DB_NAME }}
      DB_HOST:
        description: "Database host"
        value: ${{ jobs.load-env.outputs.DB_HOST }}
      DB_PORT:
        description: "Database port"
        value: ${{ jobs.load-env.outputs.DB_PORT }}

jobs:
  load-env:
    runs-on: ubuntu-latest
    outputs:
      GO_VERSION: ${{ steps.export.outputs.GO_VERSION }}
      DB_USER: ${{ steps.export.outputs.DB_USER }}
      DB_PASSWORD: ${{ steps.export.outputs.DB_PASSWORD }}
      DB_NAME: ${{ steps.export.outputs.DB_NAME }}
      DB_HOST: ${{ steps.export.outputs.DB_HOST }}
      DB_PORT: ${{ steps.export.outputs.DB_PORT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Export environment variables
        id: export
        run: |
          if [ -f ./build/.env ]; then
            # Define the list of environment variables
            VARS=("GO_VERSION" "DB_USER" "DB_PASSWORD" "DB_NAME" "DB_HOST" "DB_PORT")
          
            # Loop through each variable to extract and export its value
            for var in "${VARS[@]}"; do
              value=$(grep "^$var=" ./build/.env | cut -d '=' -f2)
          
              if [ -z "$value" ]; then
                echo "Warning: $var is empty in .env"
              fi

              # Set the output variable for each environment variable
              echo "$var=$value" >> $GITHUB_OUTPUT

            done
          else
            echo "No .env file found, skipping variable export."
            exit 1
          fi
